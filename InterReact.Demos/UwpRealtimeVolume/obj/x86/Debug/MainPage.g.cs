#pragma checksum "C:\prg\myProjects\GitHub\InterReact\InterReact.Demos\UwpRealtimeVolume\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A9AA21259E8B6A5DAA5AA16ED7107B3C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UwpRealtimeVolume
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::UwpRealtimeVolume.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBox obj2;
            private global::Windows.UI.Xaml.Controls.TextBlock obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;
            private global::Windows.UI.Xaml.Controls.TextBlock obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.Controls.TextChangedEventHandler obj2TextChanged;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2IsEnabledDisabled = false;
            private static bool isobj3TextDisabled = false;
            private static bool isobj4TextDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj5ForegroundDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj6ForegroundDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj7ForegroundDisabled = false;
            private static bool isobj8TextDisabled = false;
            private static bool isobj8ForegroundDisabled = false;
            private static bool isobj9TextDisabled = false;
            private static bool isobj10TextDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj12TextDisabled = false;
            private static bool isobj13TextDisabled = false;
            private static bool isobj14TextDisabled = false;
            private static bool isobj15TextDisabled = false;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 36 && columnNumber == 81)
                {
                    isobj2IsEnabledDisabled = true;
                }
                else if (lineNumber == 36 && columnNumber == 18)
                {
                    this.obj2.TextChanged -= obj2TextChanged;
                }
                else if (lineNumber == 38 && columnNumber == 20)
                {
                    isobj3TextDisabled = true;
                }
                else if (lineNumber == 39 && columnNumber == 20)
                {
                    isobj4TextDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 20)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 66)
                {
                    isobj5ForegroundDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 20)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 66)
                {
                    isobj6ForegroundDisabled = true;
                }
                else if (lineNumber == 46 && columnNumber == 20)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 46 && columnNumber == 67)
                {
                    isobj7ForegroundDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 20)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 73)
                {
                    isobj8ForegroundDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 20)
                {
                    isobj9TextDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 20)
                {
                    isobj10TextDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 20)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 20)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 20)
                {
                    isobj13TextDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 20)
                {
                    isobj14TextDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 20)
                {
                    isobj15TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // MainPage.xaml line 36
                        this.obj2 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.obj2TextChanged = (global::System.Object p0, global::Windows.UI.Xaml.Controls.TextChangedEventArgs p1) =>
                        {
                            this.dataRoot.Vm.Symbol.TextChanged(p0, p1);
                        };
                        ((global::Windows.UI.Xaml.Controls.TextBox)target).TextChanged += obj2TextChanged;
                        break;
                    case 3: // MainPage.xaml line 38
                        this.obj3 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 4: // MainPage.xaml line 39
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 5: // MainPage.xaml line 44
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 6: // MainPage.xaml line 45
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 7: // MainPage.xaml line 46
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // MainPage.xaml line 47
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9: // MainPage.xaml line 48
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10: // MainPage.xaml line 49
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 11: // MainPage.xaml line 50
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12: // MainPage.xaml line 51
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13: // MainPage.xaml line 52
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14: // MainPage.xaml line 53
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 15: // MainPage.xaml line 54
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                throw new global::System.NotImplementedException();
            }

            public void Recycle()
            {
                throw new global::System.NotImplementedException();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UwpRealtimeVolume.MainPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UwpRealtimeVolume.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm(obj.Vm, phase);
                    }
                }
            }
            private void Update_Vm(global::UwpRealtimeVolume.MainViewModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_Symbol(obj.Symbol, phase);
                        this.Update_Vm_Date(obj.Date, phase);
                        this.Update_Vm_Title(obj.Title, phase);
                        this.Update_Vm_BidPrice(obj.BidPrice, phase);
                        this.Update_Vm_BidPriceChange(obj.BidPriceChange, phase);
                        this.Update_Vm_AskPrice(obj.AskPrice, phase);
                        this.Update_Vm_AskPriceChange(obj.AskPriceChange, phase);
                        this.Update_Vm_LastPrice(obj.LastPrice, phase);
                        this.Update_Vm_LastPriceChange(obj.LastPriceChange, phase);
                        this.Update_Vm_BidSize(obj.BidSize, phase);
                        this.Update_Vm_AskSize(obj.AskSize, phase);
                        this.Update_Vm_LastSize(obj.LastSize, phase);
                        this.Update_Vm_Volume(obj.Volume, phase);
                        this.Update_Vm_Spread(obj.Spread, phase);
                        this.Update_Vm_LastInstant(obj.LastInstant, phase);
                        this.Update_Vm_ContractTimeStatus(obj.ContractTimeStatus, phase);
                    }
                }
            }
            private void Update_Vm_Symbol(global::UwpRealtimeVolume.Utility.TextBoxChangingObservable obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_Symbol(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_Symbol_IsEnabled(obj.IsEnabled, phase);
                    }
                }
            }
            private void Update_Vm_Symbol_IsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 36
                    if (!isobj2IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj2, obj);
                    }
                }
            }
            private void Update_Vm_Date(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.DateTime> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_Date(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_Date_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_Date_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 38
                    if (!isobj3TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                    }
                }
            }
            private void Update_Vm_Title(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_Title(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_Title_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_Title_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 39
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }
            private void Update_Vm_BidPrice(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_BidPrice(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_BidPrice_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_BidPrice_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 44
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                    }
                }
            }
            private void Update_Vm_BidPriceChange(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_BidPriceChange(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_BidPriceChange_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_Vm_BidPriceChange_Value(global::System.Nullable<global::System.Double> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 44
                    if (!isobj5ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj5, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("DoubleToColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                }
            }
            private void Update_Vm_AskPrice(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_AskPrice(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_AskPrice_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_AskPrice_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 45
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_Vm_AskPriceChange(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_AskPriceChange(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_AskPriceChange_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_Vm_AskPriceChange_Value(global::System.Nullable<global::System.Double> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 45
                    if (!isobj6ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj6, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("DoubleToColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                }
            }
            private void Update_Vm_LastPrice(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_LastPrice(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_LastPrice_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_LastPrice_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 46
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                }
            }
            private void Update_Vm_LastPriceChange(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_LastPriceChange(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_LastPriceChange_Value(obj.Value, phase);
                        this.Update_Vm_LastPriceChange_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_LastPriceChange_Value(global::System.Nullable<global::System.Double> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 46
                    if (!isobj7ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj7, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("DoubleToColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                    // MainPage.xaml line 47
                    if (!isobj8ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj8, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("DoubleToColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                }
            }
            private void Update_Vm_LastPriceChange_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 47
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj, null);
                    }
                }
            }
            private void Update_Vm_BidSize(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_BidSize(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_BidSize_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_BidSize_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 48
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj, null);
                    }
                }
            }
            private void Update_Vm_AskSize(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_AskSize(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_AskSize_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_AskSize_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 49
                    if (!isobj10TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj10, obj, null);
                    }
                }
            }
            private void Update_Vm_LastSize(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_LastSize(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_LastSize_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_LastSize_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 50
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_Vm_Volume(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_Volume(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_Volume_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_Volume_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 51
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_Vm_Spread(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_Spread(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_Spread_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_Spread_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 52
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                    }
                }
            }
            private void Update_Vm_LastInstant(global::UwpRealtimeVolume.Utility.BindableObserver<global::NodaTime.Instant> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_LastInstant(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 53
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj != null ? obj.ToString() : null, null);
                    }
                }
            }
            private void Update_Vm_ContractTimeStatus(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Vm_ContractTimeStatus(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Vm_ContractTimeStatus_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Vm_ContractTimeStatus_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 54
                    if (!isobj15TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainPage_obj1_Bindings> weakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public MainPage_obj1_Bindings TryGetBindingObject()
                {
                    MainPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_Vm_Symbol(null);
                    UpdateChildListeners_Vm_Date(null);
                    UpdateChildListeners_Vm_Title(null);
                    UpdateChildListeners_Vm_BidPrice(null);
                    UpdateChildListeners_Vm_BidPriceChange(null);
                    UpdateChildListeners_Vm_AskPrice(null);
                    UpdateChildListeners_Vm_AskPriceChange(null);
                    UpdateChildListeners_Vm_LastPrice(null);
                    UpdateChildListeners_Vm_LastPriceChange(null);
                    UpdateChildListeners_Vm_BidSize(null);
                    UpdateChildListeners_Vm_AskSize(null);
                    UpdateChildListeners_Vm_LastSize(null);
                    UpdateChildListeners_Vm_Volume(null);
                    UpdateChildListeners_Vm_Spread(null);
                    UpdateChildListeners_Vm_LastInstant(null);
                    UpdateChildListeners_Vm_ContractTimeStatus(null);
                }

                public void PropertyChanged_Vm_Symbol(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.TextBoxChangingObservable obj = sender as global::UwpRealtimeVolume.Utility.TextBoxChangingObservable;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_Symbol_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_Symbol_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.TextBoxChangingObservable cache_Vm_Symbol = null;
                public void UpdateChildListeners_Vm_Symbol(global::UwpRealtimeVolume.Utility.TextBoxChangingObservable obj)
                {
                    if (obj != cache_Vm_Symbol)
                    {
                        if (cache_Vm_Symbol != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_Symbol).PropertyChanged -= PropertyChanged_Vm_Symbol;
                            cache_Vm_Symbol = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_Symbol = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_Symbol;
                        }
                    }
                }
                public void PropertyChanged_Vm_Date(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.DateTime> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.DateTime>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_Date_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_Date_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.DateTime> cache_Vm_Date = null;
                public void UpdateChildListeners_Vm_Date(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.DateTime> obj)
                {
                    if (obj != cache_Vm_Date)
                    {
                        if (cache_Vm_Date != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_Date).PropertyChanged -= PropertyChanged_Vm_Date;
                            cache_Vm_Date = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_Date = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_Date;
                        }
                    }
                }
                public void PropertyChanged_Vm_Title(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_Title_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_Title_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> cache_Vm_Title = null;
                public void UpdateChildListeners_Vm_Title(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> obj)
                {
                    if (obj != cache_Vm_Title)
                    {
                        if (cache_Vm_Title != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_Title).PropertyChanged -= PropertyChanged_Vm_Title;
                            cache_Vm_Title = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_Title = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_Title;
                        }
                    }
                }
                public void PropertyChanged_Vm_BidPrice(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_BidPrice_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_BidPrice_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> cache_Vm_BidPrice = null;
                public void UpdateChildListeners_Vm_BidPrice(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj)
                {
                    if (obj != cache_Vm_BidPrice)
                    {
                        if (cache_Vm_BidPrice != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_BidPrice).PropertyChanged -= PropertyChanged_Vm_BidPrice;
                            cache_Vm_BidPrice = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_BidPrice = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_BidPrice;
                        }
                    }
                }
                public void PropertyChanged_Vm_BidPriceChange(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_BidPriceChange_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_BidPriceChange_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> cache_Vm_BidPriceChange = null;
                public void UpdateChildListeners_Vm_BidPriceChange(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj)
                {
                    if (obj != cache_Vm_BidPriceChange)
                    {
                        if (cache_Vm_BidPriceChange != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_BidPriceChange).PropertyChanged -= PropertyChanged_Vm_BidPriceChange;
                            cache_Vm_BidPriceChange = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_BidPriceChange = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_BidPriceChange;
                        }
                    }
                }
                public void PropertyChanged_Vm_AskPrice(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_AskPrice_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_AskPrice_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> cache_Vm_AskPrice = null;
                public void UpdateChildListeners_Vm_AskPrice(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj)
                {
                    if (obj != cache_Vm_AskPrice)
                    {
                        if (cache_Vm_AskPrice != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_AskPrice).PropertyChanged -= PropertyChanged_Vm_AskPrice;
                            cache_Vm_AskPrice = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_AskPrice = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_AskPrice;
                        }
                    }
                }
                public void PropertyChanged_Vm_AskPriceChange(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_AskPriceChange_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_AskPriceChange_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> cache_Vm_AskPriceChange = null;
                public void UpdateChildListeners_Vm_AskPriceChange(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj)
                {
                    if (obj != cache_Vm_AskPriceChange)
                    {
                        if (cache_Vm_AskPriceChange != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_AskPriceChange).PropertyChanged -= PropertyChanged_Vm_AskPriceChange;
                            cache_Vm_AskPriceChange = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_AskPriceChange = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_AskPriceChange;
                        }
                    }
                }
                public void PropertyChanged_Vm_LastPrice(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_LastPrice_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_LastPrice_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> cache_Vm_LastPrice = null;
                public void UpdateChildListeners_Vm_LastPrice(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Double> obj)
                {
                    if (obj != cache_Vm_LastPrice)
                    {
                        if (cache_Vm_LastPrice != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_LastPrice).PropertyChanged -= PropertyChanged_Vm_LastPrice;
                            cache_Vm_LastPrice = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_LastPrice = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_LastPrice;
                        }
                    }
                }
                public void PropertyChanged_Vm_LastPriceChange(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_LastPriceChange_Value(obj.Value, DATA_CHANGED);
                                bindings.Update_Vm_LastPriceChange_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_LastPriceChange_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_LastPriceChange_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> cache_Vm_LastPriceChange = null;
                public void UpdateChildListeners_Vm_LastPriceChange(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj)
                {
                    if (obj != cache_Vm_LastPriceChange)
                    {
                        if (cache_Vm_LastPriceChange != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_LastPriceChange).PropertyChanged -= PropertyChanged_Vm_LastPriceChange;
                            cache_Vm_LastPriceChange = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_LastPriceChange = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_LastPriceChange;
                        }
                    }
                }
                public void PropertyChanged_Vm_BidSize(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_BidSize_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_BidSize_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> cache_Vm_BidSize = null;
                public void UpdateChildListeners_Vm_BidSize(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj)
                {
                    if (obj != cache_Vm_BidSize)
                    {
                        if (cache_Vm_BidSize != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_BidSize).PropertyChanged -= PropertyChanged_Vm_BidSize;
                            cache_Vm_BidSize = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_BidSize = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_BidSize;
                        }
                    }
                }
                public void PropertyChanged_Vm_AskSize(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_AskSize_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_AskSize_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> cache_Vm_AskSize = null;
                public void UpdateChildListeners_Vm_AskSize(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj)
                {
                    if (obj != cache_Vm_AskSize)
                    {
                        if (cache_Vm_AskSize != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_AskSize).PropertyChanged -= PropertyChanged_Vm_AskSize;
                            cache_Vm_AskSize = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_AskSize = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_AskSize;
                        }
                    }
                }
                public void PropertyChanged_Vm_LastSize(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_LastSize_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_LastSize_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> cache_Vm_LastSize = null;
                public void UpdateChildListeners_Vm_LastSize(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj)
                {
                    if (obj != cache_Vm_LastSize)
                    {
                        if (cache_Vm_LastSize != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_LastSize).PropertyChanged -= PropertyChanged_Vm_LastSize;
                            cache_Vm_LastSize = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_LastSize = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_LastSize;
                        }
                    }
                }
                public void PropertyChanged_Vm_Volume(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_Volume_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_Volume_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> cache_Vm_Volume = null;
                public void UpdateChildListeners_Vm_Volume(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Int32> obj)
                {
                    if (obj != cache_Vm_Volume)
                    {
                        if (cache_Vm_Volume != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_Volume).PropertyChanged -= PropertyChanged_Vm_Volume;
                            cache_Vm_Volume = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_Volume = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_Volume;
                        }
                    }
                }
                public void PropertyChanged_Vm_Spread(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_Spread_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_Spread_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> cache_Vm_Spread = null;
                public void UpdateChildListeners_Vm_Spread(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.Nullable<global::System.Double>> obj)
                {
                    if (obj != cache_Vm_Spread)
                    {
                        if (cache_Vm_Spread != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_Spread).PropertyChanged -= PropertyChanged_Vm_Spread;
                            cache_Vm_Spread = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_Spread = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_Spread;
                        }
                    }
                }
                public void PropertyChanged_Vm_LastInstant(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::NodaTime.Instant> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::NodaTime.Instant>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::NodaTime.Instant> cache_Vm_LastInstant = null;
                public void UpdateChildListeners_Vm_LastInstant(global::UwpRealtimeVolume.Utility.BindableObserver<global::NodaTime.Instant> obj)
                {
                    if (obj != cache_Vm_LastInstant)
                    {
                        if (cache_Vm_LastInstant != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_LastInstant).PropertyChanged -= PropertyChanged_Vm_LastInstant;
                            cache_Vm_LastInstant = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_LastInstant = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_LastInstant;
                        }
                    }
                }
                public void PropertyChanged_Vm_ContractTimeStatus(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> obj = sender as global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Vm_ContractTimeStatus_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Vm_ContractTimeStatus_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> cache_Vm_ContractTimeStatus = null;
                public void UpdateChildListeners_Vm_ContractTimeStatus(global::UwpRealtimeVolume.Utility.BindableObserver<global::System.String> obj)
                {
                    if (obj != cache_Vm_ContractTimeStatus)
                    {
                        if (cache_Vm_ContractTimeStatus != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Vm_ContractTimeStatus).PropertyChanged -= PropertyChanged_Vm_ContractTimeStatus;
                            cache_Vm_ContractTimeStatus = null;
                        }
                        if (obj != null)
                        {
                            cache_Vm_ContractTimeStatus = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Vm_ContractTimeStatus;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

